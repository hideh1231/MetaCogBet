# Bayesian estimation of meta-d/d (2 way repeated measures ANOVA)

data {
    for (s in 1:nsubj) {
        for (i in 1:2){
            # Type 1 counts for task 1
            N[s,i] <- sum(counts[s,1:(nratings*2),i])
            S[s,i] <- sum(counts[s,(nratings*2+1):(nratings*4),i])
            H[s,i] <- sum(counts[s,(nratings*3+1):(nratings*4),i])
            M[s,i] <- sum(counts[s,(nratings*2+1):(nratings*3),i])
            FA[s,i] <- sum(counts[s,(nratings+1):(nratings*2),i])
            CR[s,i] <- sum(counts[s,1:(nratings),i])
        }
    }
}

model {
  	for (s in 1:nsubj) {
    	for (i in 1:2){
    
			## TYPE 2 SDT MODEL (META-D)
			# Multinomial likelihood for response counts ordered as c(nR_S1,nR_S2)

			counts[s,1:(nratings),i] ~ dmulti(prT[s,1:(nratings),i],CR[s,i])
			counts[s,(nratings+1):(nratings*2),i] ~ dmulti(prT[s,(nratings+1):(nratings*2),i],FA[s,i])
			counts[s,(nratings*2+1):(nratings*3),i] ~ dmulti(prT[s,(nratings*2+1):(nratings*3),i],M[s,i])
			counts[s,(nratings*3+1):(nratings*4),i] ~ dmulti(prT[s,(nratings*3+1):(nratings*4),i],H[s,i])
			
			# Means of SDT distributions]
			mu[s,i] <- Mratio[s,i]*d1[s,i]
			S2mu[s,i] <- mu[s,i]/2
			S1mu[s,i] <- -mu[s,i]/2

			# Calculate normalisation constants
			C_area_rS1[s,i] <- phi(c1[s,i] - S1mu[s,i])
			I_area_rS1[s,i] <- phi(c1[s,i] - S2mu[s,i])
			C_area_rS2[s,i] <- 1-phi(c1[s,i] - S2mu[s,i])
			I_area_rS2[s,i] <- 1-phi(c1[s,i] - S1mu[s,i])

			# Get nC_rS1 probs
			pr[s,1,i] <- phi(cS1[s,1,i] - S1mu[s,i])/C_area_rS1[s,i]
			for (k in 1:(nratings-2)) {
				pr[s,(k+1),i] <- (phi(cS1[s,(k+1),i] - S1mu[s,i])-phi(cS1[s,k,i] - S1mu[s,i]))/C_area_rS1[s,i]
			}
			pr[s,(nratings),i] <- (phi(c1[s,i] - S1mu[s,i])-phi(cS1[s,(nratings-1),i] - S1mu[s,i]))/C_area_rS1[s,i]

			# Get nI_rS2 probs
			pr[s,(nratings+1),i] <- ((1-phi(c1[s,i] - S1mu[s,i]))-(1-phi(cS2[s,1,i] - S1mu[s,i])))/I_area_rS2[s,i]
			for (k in 1:(nratings-2)) {
				pr[s,(nratings+1+k),i] <- ((1-phi(cS2[s,k,i] - S1mu[s,i]))-(1-phi(cS2[s,(k+1),i] - S1mu[s,i])))/I_area_rS2[s,i]
			}
			pr[s,(nratings*2),i] <- (1-phi(cS2[s,(nratings-1),i] - S1mu[s,i]))/I_area_rS2[s,i]

			# Get nI_rS1 probs
			pr[s,(nratings*2+1), i] <- phi(cS1[s,1,i] - S2mu[s,i])/I_area_rS1[s,i]
			for (k in 1:(nratings-2)) {
				pr[s,(nratings*2+1+k),i] <- (phi(cS1[s,(k+1),i] - S2mu[s,i])-phi(cS1[s,k,i] - S2mu[s,i]))/I_area_rS1[s,i]
			}
			pr[s,(nratings*3),i] <- (phi(c1[s,i] - S2mu[s,i])-phi(cS1[s,(nratings-1),i] - S2mu[s,i]))/I_area_rS1[s,i]

			# Get nC_rS2 probs
			pr[s,(nratings*3+1),i] <- ((1-phi(c1[s,i] - S2mu[s,i]))-(1-phi(cS2[s,1,i] - S2mu[s,i])))/C_area_rS2[s,i]
			for (k in 1:(nratings-2)) {
				pr[s,(nratings*3+1+k),i] <- ((1-phi(cS2[s,k,i] - S2mu[s,i]))-(1-phi(cS2[s,(k+1),i] - S2mu[s,i])))/C_area_rS2[s,i]
			}
			pr[s,(nratings*4),i] <- (1-phi(cS2[s,(nratings-1),i] - S2mu[s,i]))/C_area_rS2[s,i]

			# Avoid underflow of probabilities
			for (ii in 1:(nratings*4)) {
				prT[s,ii,i] <- ifelse(pr[s,ii,i] < Tol, Tol, pr[s,ii,i])
			}

			# Specify ordered prior on criteria (bounded above and below by Type 1 c)
			for (j in 1:(nratings-1)) {
				cS1_raw[s,j,i] ~ dnorm(-mu_c2, lambda_c2) T(,c1[s,i]-Tol)
				cS2_raw[s,j,i] ~ dnorm(mu_c2, lambda_c2) T(c1[s,i]+Tol,)
			}
			cS1[s,1:(nratings-1),i] <- sort(cS1_raw[s,1:(nratings-1),i])
			cS2[s,1:(nratings-1),i] <- sort(cS2_raw[s,1:(nratings-1),i])

			mu_regression[s,i] <- dbase[s] + beta1[s]*cov[s] + Bd_Condition[s]*Condition[i] + Bd_interaction[s]*Condition[i]*cov[s]
			logMratio[s,i] ~ dnorm(mu_regression[s,i], tau[s])
			Mratio[s,i] <- exp(logMratio[s,i])
		}

		dbase[s] ~ dnorm(muD,lamD)
		Bd_Condition[s] ~ dnorm(muBd_Condition,lamBd_Condition)
		Bd_interaction[s] ~ dnorm(muBd_interaction,lamBd_interaction)
		tau[s] ~ dgamma(0.01, 0.01)
		beta1[s] ~ dnorm(mu_beta1, lambda_beta1)
	}

	mu_c2 ~ dnorm(0, 0.01)
	sigma_c2 ~ dnorm(0, 0.01) I(0, )
	lambda_c2 <- pow(sigma_c2, -2)

	# Hyperpriors
	muD ~ dnorm(0,0.01)
	sigma_D ~ dnorm(0, 0.1) I(0, )
	lamD <- pow(sigma_D, -2)
	sigD <- 1/sqrt(lamD)

	mu_beta1 ~ dnorm(0, 0.01)
	sigma_beta1 ~ dnorm(0, 0.1) I(0, )
	lambda_beta1 <- pow(sigma_beta1, -2)

	muBd_Condition ~ dnorm(0,0.01)
	sigma_Condition ~ dnorm(0, 0.1) I(0, )
	lamBd_Condition <- pow(sigma_Condition, -2)
	sigD_Condition <- 1/sqrt(lamBd_Condition)

	muBd_interaction ~ dnorm(0,0.01)
	sigma_interaction ~ dnorm(0, 0.1) I(0, )
	lamBd_interaction <- pow(sigma_interaction, -2)
	sigD_interaction <- 1/sqrt(lamBd_interaction)

	muD_prior ~ dnorm(0, 0.01)
	mu_beta1_prior ~ dnorm(0, 0.01)
	muBd_Condition_prior ~ dnorm(0, 0.01)
	muBd_interaction_prior ~ dnorm(0, 0.01)
}
